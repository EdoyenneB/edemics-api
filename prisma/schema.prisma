generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Add these fields to your existing schema
model User {
  id       String  @id @default(cuid())
  email    String  @unique
  password String
  name     String
  role     String
  tenantId String
  branchId String? // ADD THIS

  tenant Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  branch Branch? @relation(fields: [branchId], references: [id], onDelete: SetNull) // ADD THIS

  @@map("users")
}
model FormConfiguration {
  id        String   @id @default(cuid())
  config    Json     // Store the entire form configuration
  tenantId  String   @unique
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("form_configurations")
}
model School {
  id                  String  @id @default(cuid())
  name                String
  address             String?
  email               String?
  phone               String?
  academicYear        String?
  country             String?
  logo                String?
  onboardingCompleted Boolean @default(false) // ADD THIS
  tenantId            String

  tenant        Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  branches      Branch[]
  departments   Department[]
  notifications NotificationSettings[]
  admissionApplications AdmissionApplication[]
  admissionSettings    AdmissionSettings?  // Changed to single for one-to-one
  admissionDocuments   AdmissionDocument[]

  @@map("schools")
}

model Branch {
  id               String  @id @default(cuid())
  name             String
  address          String
  startTimeFrom    String?
  startTimeTill    String?
  endTimeFrom      String?
  endTimeTill      String?
  recess1StartTime String?
  recess1EndTime   String?
  recess2StartTime String?
  recess2EndTime   String?
  isHeadOffice     Boolean @default(false) // ADD THIS
  schoolId         String
  tenantId         String

  school      School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  employees   Employee[]
  classes     Class[]
  sessions    Session[]
  departments Department[] // ADD THIS
  users       User[] // ADD THIS
  admissionApplications AdmissionApplication[]

  @@map("branches")
}



model Class {
  id           String   @id @default(cuid())
  name         String
  department   String?
  branchId     String
  tenantId     String
  departmentId String?  // Reference to Department

  branch        Branch      @relation(fields: [branchId], references: [id], onDelete: Cascade)
  tenant        Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  departmentRel Department? @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  sections      Section[]
  subjects      Subject[]
  employees     Employee[]
  students      Student[]

  @@map("classes")
}

model Department {
  id                 String       @id @default(cuid())
  name               String
  isAcademic         Boolean      @default(false)
  type               String       // "parent", "department", "sub", "class"
  parentDepartmentId String?
  schoolId           String
  tenantId           String
  branchId           String?

  parentDepartment Department?   @relation("DepartmentParent", fields: [parentDepartmentId], references: [id])
  childDepartments Department[]  @relation("DepartmentParent")
  school           School        @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  tenant           Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  employees        Employee[]
  branch           Branch?       @relation(fields: [branchId], references: [id], onDelete: Cascade)
  classes          Class[]

  @@map("departments")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String   @unique
  subdomain String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users          User[]
  schools        School[]
  branches       Branch[]
  departments    Department[]
  employees      Employee[]
  classes        Class[]
  subjects       Subject[]
  students       Student[]
  parents        Parent[]
  sessions       Session[]
  notifications  NotificationSettings[]
  sections       Section[]
  parentStudents ParentStudent[]
  admissionApplications AdmissionApplication[]
  admissionSettings    AdmissionSettings?
  admissionDocuments   AdmissionDocument[]
  form_configurations FormConfiguration[]

  @@map("tenants")
}

model Employee {
  id                 String   @id @default(cuid())
  name               String
  email              String
  phone              String?
  employeeId         String?  // Employee ID field
  departmentId       String?
  subDepartment      String?  // Sub-department name
  customDepartment   String?  // ADD THIS: For custom department names
  customSubDepartment String? // ADD THIS: For custom sub-department names
  classId            String?
  branchId           String
  tenantId           String

  department Department? @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  branch     Branch      @relation(fields: [branchId], references: [id], onDelete: Cascade)
  tenant     Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  class      Class?      @relation(fields: [classId], references: [id], onDelete: SetNull)

  @@map("employees")
}

model Section {
  id                 String   @id @default(cuid())
  name               String
  teacher            String?
  assistantTeacher   String?
  capacity           String?
  building           String?
  floor              String?
  wing               String?
  customTeacher      String?  // ADD THIS: For custom teacher names
  customAssistantTeacher String? // ADD THIS: For custom assistant teacher names
  classId            String
  tenantId           String

  class    Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  students Student[]
  subjects Subject[]

  @@map("sections")
}
model Subject {
  id                   String   @id @default(cuid())
  code                 String
  name                 String
  teacher              String?
  assistantTeacher     String?
  customTeacher        String?  // Make sure this line exists
  customAssistantTeacher String? // Make sure this line exists
  classId              String
  sectionId            String?
  tenantId             String

  class   Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  section Section? @relation(fields: [sectionId], references: [id], onDelete: SetNull)
  tenant  Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("subjects")
}

model Student {
  id              String   @id @default(cuid())
  name            String
  admissionNumber String
  classId         String?  // Make sure this has ? to allow null
  sectionId       String?
  tenantId        String?

  class          Class?   @relation(fields: [classId], references: [id])
  section        Section? @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  tenant         Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  parentStudents ParentStudent[]

  @@map("students")
}

model Parent {
  id       String  @id @default(cuid())
  name     String
  type     String // Father, Mother, Guardian
  email    String?
  phone    String?
  tenantId String

  tenant         Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  parentStudents ParentStudent[]

  @@map("parents")
}

model ParentStudent {
  id        String @id @default(cuid())
  parentId  String
  studentId String
  tenantId  String

  parent  Parent  @relation(fields: [parentId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  tenant  Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([parentId, studentId])
  @@map("parent_students")
}

model Session {
  id        String @id @default(cuid())
  branchId  String
  startDate String
  endDate   String
  tenantId  String

  branch Branch @relation(fields: [branchId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model NotificationSettings {
  id                String  @id @default(cuid())
  emailAlerts       Boolean @default(false)
  pushNotifications Boolean @default(false)
  schoolId          String
  tenantId          String

  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("notification_settings")
}
// prisma/schema.prisma (additional models)

model AdmissionApplication {
  id          String   @id @default(cuid())
  applicationNumber String   @unique
  status      String   // Form Submitted, Under Assessment, Admission Letter Sent, Awaiting Payment, Admitted
  submittedAt DateTime @default(now())
  studentId   String?  // Add this field

  
  // Student Information
  firstName   String
  lastName    String
  middleName  String?
  dateOfBirth DateTime
  gender      String
  age         Int?
  religion    String?
  nationality String
  homeLanguage String?
  disability  String?
  specialNeeds String?
  previousSchool String?
  bloodGroup  String?
  genotype    String?
  knownAllergies String?
  chronicConditions String?
  immunizationStatus String?
  
  // Address Information
  address     String
  city        String
  state       String
  country     String
  postalCode  String?
  lga         String?
  stateOfOrigin String?
  
  // Class Information
  class       String
  section     String
  yearOfAdmission String
  
  // Parent/Guardian Information
  fatherName  String?
  fatherEmail String?
  fatherPhone String?
  fatherOccupation String?
  fatherEducation String?
  fatherCompany String?
  fatherOfficeAddress String?
  
  motherName  String?
  motherEmail String?
  motherPhone String?
  motherOccupation String?
  motherEducation String?
  motherCompany String?
  motherOfficeAddress String?
  
  guardianName String?
  guardianEmail String?
  guardianPhone String?
  guardianRelationship String?
  guardianAddress String?
  guardianOccupation String?
  
  emergencyName String?
  emergencyRelationship String?
  emergencyPhone String?
  emergencyPhone2 String?
  
  // Documents
  birthCertificate Boolean @default(false)
  immunizationRecords Boolean @default(false)
  previousSchoolReport Boolean @default(false)
  medicalReport Boolean @default(false)
  parentIdProof Boolean @default(false)
  otherDocuments Boolean @default(false)
  
  // Additional fields
  assessmentDate DateTime?
  assessmentTime String?
  feeAmount      Float?
  paymentDeadline DateTime?
  orientationDate DateTime?
  
  tenantId   String
  branchId   String?
  schoolId   String?
  
  // Relations
  tenant     Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  branch     Branch?   @relation(fields: [branchId], references: [id])
  school     School?   @relation(fields: [schoolId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admission_applications")
}

model AdmissionSettings {
  id        String   @id @default(cuid())
  
  // Basic Settings
  customUrl String
  documentPrefix String @default("ADM")
  documentSuffix String
  nextNumber String @default("001")
  referenceType String @default("prefix") // prefix or suffix
  
  // Age Criteria (stored as JSON)
  ageCriteria Json?
  
  // Fee Configuration (stored as JSON)
  feeConfiguration Json?
  
  // Workflow Settings (stored as JSON)
  workflow Json?
  
  // Academic Periods (stored as JSON)
  admissionPeriods Json?
  
  tenantId String @unique
  schoolId String? @unique  // Added unique constraint for one-to-one
  
  // Relations - Now one-to-one since schoolId is unique
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  school School? @relation(fields: [schoolId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admission_settings")
}

model AdmissionDocument {
  id          String   @id @default(cuid())
  name        String
  type        String   // admission_letter, assessment, payment, etc.
  content     String?  // HTML content or template
  attachments Json?    // Store as JSON array instead of String[]
  
  tenantId String
  schoolId String?
  
  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  school School? @relation(fields: [schoolId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admission_documents")
}

// Add these relations to existing models:





