// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  password String
  name     String
  role     String
  tenantId String
  branchId String?

  tenant Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  branch Branch? @relation(fields: [branchId], references: [id], onDelete: SetNull)

  @@map("users")
}

model FormConfiguration {
  id        String   @id @default(cuid())
  config    Json
  tenantId  String   @unique
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("form_configurations")
}

model School {
  id                  String  @id @default(cuid())
  name                String
  address             String?
  email               String?
  phone               String?
  academicYear        String?
  country             String?
  logo                String?
  onboardingCompleted Boolean @default(false)
  tenantId            String

  tenant                 Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  branches               Branch[]
  departments            Department[]
  notifications          NotificationSettings[]
  admissionApplications  AdmissionApplication[]
  admissionSettings      AdmissionSettings?
  admissionDocuments     AdmissionDocument[]
  schoolBuses           SchoolBus[]
  busEnrollments        BusEnrollment[]

  @@map("schools")
}

model Branch {
  id               String  @id @default(cuid())
  name             String
  address          String
  startTimeFrom    String?
  startTimeTill    String?
  endTimeFrom      String?
  endTimeTill      String?
  recess1StartTime String?
  recess1EndTime   String?
  recess2StartTime String?
  recess2EndTime   String?
  isHeadOffice     Boolean @default(false)
  schoolId         String
  tenantId         String

  school      School       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  employees   Employee[]
  classes     Class[]
  sessions    Session[]
  departments Department[]
  users       User[]
  admissionApplications AdmissionApplication[]
  schoolBuses SchoolBus[]
  busEnrollments        BusEnrollment[]

  @@map("branches")
}

model Class {
  id           String   @id @default(cuid())
  name         String
  department   String?
  branchId     String
  tenantId     String
  departmentId String?

  branch        Branch      @relation(fields: [branchId], references: [id], onDelete: Cascade)
  tenant        Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  departmentRel Department? @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  sections      Section[]
  subjects      Subject[]
  employees     Employee[]
  students      Student[]

  @@map("classes")
}

model Department {
  id                 String       @id @default(cuid())
  name               String
  isAcademic         Boolean      @default(false)
  type               String
  parentDepartmentId String?
  schoolId           String
  tenantId           String
  branchId           String?

  parentDepartment Department?   @relation("DepartmentParent", fields: [parentDepartmentId], references: [id])
  childDepartments Department[]  @relation("DepartmentParent")
  school           School        @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  tenant           Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  employees        Employee[]
  branch           Branch?       @relation(fields: [branchId], references: [id], onDelete: Cascade)
  classes          Class[]

  @@map("departments")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String   @unique
  subdomain String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users                   User[]
  schools                 School[]
  branches                Branch[]
  departments             Department[]
  employees               Employee[]
  classes                 Class[]
  subjects                Subject[]
  students                Student[]
  parents                 Parent[]
  sessions                Session[]
  notifications           NotificationSettings[]
  sections                Section[]
  parentStudents          ParentStudent[]
  admissionApplications   AdmissionApplication[]
  admissionSettings       AdmissionSettings?
  admissionDocuments      AdmissionDocument[]
  form_configurations     FormConfiguration[]
  schoolBuses            SchoolBus[]
  busRoutes              BusRoute[]
  busStops               BusStop[]
  busStaff               BusStaff[]
  busStudentAssignments  BusStudentAssignment[]
  busEnrollments         BusEnrollment[]
  agents                 Agent[]
  pickupDropoffEvents PickupDropoffEvent[]



  @@map("tenants")
}

model Employee {
  id                 String   @id @default(cuid())
  name               String
  email              String
  phone              String?
  employeeId         String?
  departmentId       String?
  subDepartment      String?
  customDepartment   String?
  customSubDepartment String?
  classId            String?
  branchId           String
  tenantId           String

  department Department? @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  branch     Branch      @relation(fields: [branchId], references: [id], onDelete: Cascade)
  tenant     Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  class      Class?      @relation(fields: [classId], references: [id], onDelete: SetNull)
  busStaff   BusStaff[]

  @@map("employees")
}

model Section {
  id                 String   @id @default(cuid())
  name               String
  teacher            String?
  assistantTeacher   String?
  capacity           String?
  building           String?
  floor              String?
  wing               String?
  customTeacher      String?
  customAssistantTeacher String?
  classId            String
  tenantId           String

  class    Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  students Student[]
  subjects Subject[]

  @@map("sections")
}

model Subject {
  id                   String   @id @default(cuid())
  code                 String
  name                 String
  teacher              String?
  assistantTeacher     String?
  customTeacher        String?
  customAssistantTeacher String?
  classId              String
  sectionId            String?
  tenantId             String

  class   Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  section Section? @relation(fields: [sectionId], references: [id], onDelete: SetNull)
  tenant  Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("subjects")
}

model Student {
  id              String   @id @default(cuid())
  name            String
  admissionNumber String
  classId         String?
  sectionId       String?
  tenantId        String?

  class          Class?   @relation(fields: [classId], references: [id])
  section        Section? @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  tenant         Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  parentStudents ParentStudent[]
  busAssignments BusStudentAssignment[]
  

  // No explicit relation definition needed
  
  @@map("students")
}

model Parent {
  id       String  @id @default(cuid())
  name     String
  type     String
  email    String?
  phone    String?
  tenantId String

  tenant         Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  parentStudents ParentStudent[]

  @@map("parents")
}

model ParentStudent {
  id        String @id @default(cuid())
  parentId  String
  studentId String
  tenantId  String

  parent  Parent  @relation(fields: [parentId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  tenant  Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([parentId, studentId])
  @@map("parent_students")
}

model Session {
  id        String @id @default(cuid())
  branchId  String
  startDate String
  endDate   String
  tenantId  String

  branch Branch @relation(fields: [branchId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model NotificationSettings {
  id                String  @id @default(cuid())
  emailAlerts       Boolean @default(false)
  pushNotifications Boolean @default(false)
  schoolId          String
  tenantId          String

  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("notification_settings")
}

model AdmissionApplication {
  id          String   @id @default(cuid())
  applicationNumber String   @unique
  status      String
  submittedAt DateTime @default(now())
  studentId   String?

  firstName   String
  lastName    String
  middleName  String?
  dateOfBirth DateTime?
  gender      String?
  age         Int?
  religion    String?
  nationality String?
  homeLanguage String?
  disability  String?
  specialNeeds String?
  previousSchool String?
  bloodGroup  String?
  genotype    String?
  knownAllergies String?
  chronicConditions String?
  immunizationStatus String?
  
  address     String?
  city        String?
  state       String?
  country     String?
  postalCode  String?
  lga         String?
  stateOfOrigin String?
  
  class       String
  section     String?
  yearOfAdmission String?
  
  fatherName  String?
  fatherEmail String?
  fatherPhone String?
  fatherOccupation String?
  fatherEducation String?
  fatherCompany String?
  fatherOfficeAddress String?
  
  motherName  String?
  motherEmail String?
  motherPhone String?
  motherOccupation String?
  motherEducation String?
  motherCompany String?
  motherOfficeAddress String?
  
  guardianName String?
  guardianEmail String?
  guardianPhone String?
  guardianRelationship String?
  guardianAddress String?
  guardianOccupation String?
  
  emergencyName String?
  emergencyRelationship String?
  emergencyPhone String?
  emergencyPhone2 String?
  
  birthCertificate Boolean @default(false)
  immunizationRecords Boolean @default(false)
  previousSchoolReport Boolean @default(false)
  medicalReport Boolean @default(false)
  parentIdProof Boolean @default(false)
  otherDocuments Boolean @default(false)
  
  assessmentDate DateTime?
  assessmentTime String?
  feeAmount      Float?
  paymentDeadline DateTime?
  orientationDate DateTime?
  formData   Json?

  tenantId   String
  branchId   String?
  schoolId   String?

  tenant     Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  branch     Branch?   @relation(fields: [branchId], references: [id])
  school     School?   @relation(fields: [schoolId], references: [id])
  busEnrollments BusEnrollment[]
  agents         Agent[] @relation("AgentAdmissionApplications")
  pickupDropoffEvents PickupDropoffEvent[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admission_applications")
}

model AdmissionSettings {
  id        String   @id @default(cuid())
  
  customUrl String
  documentPrefix String @default("ADM")
  documentSuffix String
  nextNumber String @default("001")
  referenceType String @default("prefix")
  
  ageCriteria Json?
  feeConfiguration Json?
  workflow Json?
  admissionPeriods Json?
  
  tenantId String @unique
  schoolId String? @unique

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  school School? @relation(fields: [schoolId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admission_settings")
}

model AdmissionDocument {
  id          String   @id @default(cuid())
  name        String
  type        String
  content     String?
  attachments Json?
  
  tenantId String
  schoolId String?

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  school School? @relation(fields: [schoolId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admission_documents")
}

// School Bus Models
model SchoolBus {
  id              String   @id @default(cuid())
  name            String
  plateNumber     String
  year            String
  capacity        Int
  status          String   @default("active")
  driverId        String?
  administratorId String?
  routeId         String?
  tenantId        String
  branchId        String?
  schoolId        String?

  driver        BusStaff?    @relation("BusDriver", fields: [driverId], references: [id])
  administrator BusStaff?    @relation("BusAdministrator", fields: [administratorId], references: [id])
  busRoute      BusRoute?    @relation(fields: [routeId], references: [id])
  tenant        Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  branch        Branch?      @relation(fields: [branchId], references: [id])
  school        School?      @relation(fields: [schoolId], references: [id])
  students      BusStudentAssignment[]
  busStops      BusStop[]
  assignedStaff BusStaff[]   @relation("BusAssignedStaff")
  busEnrollments BusEnrollment[]
  pickupDropoffEvents PickupDropoffEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("school_buses")
}

model BusRoute {
  id          String   @id @default(cuid())
  name        String
  description String?
  baseFee     String
  status      String   @default("active")
  tenantId    String

  tenant   Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  buses    SchoolBus[]
  busStops BusStop[]
  busEnrollments BusEnrollment[]
  pickupDropoffEvents PickupDropoffEvent[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bus_routes")
}

model BusStop {
  id          String   @id @default(cuid())
  name        String
  routeId     String
  fee         String
  useBaseFee  Boolean  @default(true)
  pickupTime  String
  dropoffTime String
  order       Int
  tenantId    String
  busId       String?

  busRoute BusRoute                @relation(fields: [routeId], references: [id], onDelete: Cascade)
  tenant   Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  bus      SchoolBus?              @relation(fields: [busId], references: [id])
  students BusStudentAssignment[]
  busEnrollments BusEnrollment[]
  pickupDropoffEvents PickupDropoffEvent[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bus_stops")
}

model BusStaff {
  id                    String   @id @default(cuid())
  name                  String
  phone                 String
  email                 String?
  license               String?
  assignedBusId         String?
  route                 String?
  status                String   @default("active")
  role                  String
  photo                 String?
  licenseExpiry         String?
  yearsOfExperience     String?
  specialTraining       Boolean  @default(false)
  previousExperience    String?
  certifications        String?
  responsibilities      String?
  isSchoolStaff         Boolean  @default(true)
  vendorName            String?
  vendorCompany         String?
  vendorContact         String?
  vendorAddress         String?
  employeeId            String?
  tenantId              String

  employee      Employee?   @relation(fields: [employeeId], references: [id])
  tenant        Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  assignedBus   SchoolBus?  @relation("BusAssignedStaff", fields: [assignedBusId], references: [id])
  driverBuses   SchoolBus[] @relation("BusDriver")
  adminBuses    SchoolBus[] @relation("BusAdministrator")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bus_staff")
}

model BusStudentAssignment {
  id          String   @id @default(cuid())
  studentId   String
  busId       String
  stopId      String?
  pickupOrder Int?
  dropoffOrder Int?
  tenantId    String

  student Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  bus     SchoolBus @relation(fields: [busId], references: [id], onDelete: Cascade)
  stop    BusStop?  @relation(fields: [stopId], references: [id])
  tenant  Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, busId])
  @@map("bus_student_assignments")
}

// New Bus Enrollment Model (Fixed)
model BusEnrollment {
  id          String   @id @default(cuid())
  studentId   String
  busId       String
  routeId     String
  stopId      String
  seatNumber  Int
  terms       String   // Store as comma-separated string instead of array
  status      String   @default("active") // active, pending, inactive
  feeStatus   String   @default("pending") // paid, pending, overdue
  enrollmentDate DateTime @default(now())
  tenantId    String
  schoolId    String?
  branchId    String?

  admissionApplication AdmissionApplication @relation(fields: [studentId], references: [id], onDelete: Cascade)  
  bus     SchoolBus @relation(fields: [busId], references: [id], onDelete: Cascade)
  route   BusRoute  @relation(fields: [routeId], references: [id], onDelete: Cascade)
  stop    BusStop   @relation(fields: [stopId], references: [id], onDelete: Cascade)
  tenant  Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  school  School?   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  branch  Branch?   @relation(fields: [branchId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, busId])
  @@unique([busId, seatNumber])
  @@map("bus_enrollments")
}

model Agent {
  id           String   @id @default(cuid())
  name         String
  relationship String
  phone        String
  email        String
  type         String   // pickup, dropoff, both
  status       String   @default("active") // active, inactive
  photo        String?
  tenantId     String

  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Add this relation
  admissionApplications AdmissionApplication[] @relation("AgentAdmissionApplications")
  
  pickupDropoffEvents PickupDropoffEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("agents")
}


model PickupDropoffEvent {
  id            String   @id @default(cuid())
  studentId     String
  busId         String
  routeId       String
  stopId        String
  agentId       String
  type          String   // pickup, dropoff
  status        String   @default("pending") // completed, pending, missed
  eventDate     String
  eventTime     String
  signatureData String?  // Base64 encoded signature image
  notes         String?
  tenantId      String

  bus     SchoolBus @relation(fields: [busId], references: [id], onDelete: Cascade)
  route   BusRoute  @relation(fields: [routeId], references: [id], onDelete: Cascade)
  stop    BusStop   @relation(fields: [stopId], references: [id], onDelete: Cascade)
  agent   Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade)
  tenant  Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Add relation to AdmissionApplication
  admissionApplication AdmissionApplication @relation(fields: [studentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pickup_dropoff_events")
}

// Add relation to Student model
